"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullscreenView = exports.ABC = exports.FullscreenModel = void 0;
const widgets = require("@jupyter-widgets/base");
const NGL = require("ngl");
const base_1 = require("./base");
class FullscreenModel extends widgets.DOMWidgetModel {
    defaults() {
        return Object.assign(Object.assign({}, super.defaults()), { _model_name: 'FullscreenModel', _model_module: 'nglview-js-widgets', _model_module_version: require("../package.json").version, _view_name: "FullscreenView", _view_module: "nglview-js-widgets", _view_module_version: require("../package.json").version });
    }
}
exports.FullscreenModel = FullscreenModel;
class ABC {
}
exports.ABC = ABC;
class FullscreenView extends base_1.BaseView {
    render() {
        this.stage = new NGL.Stage();
        var that = this;
        this.model.on("msg:custom", function (msg) {
            that.on_msg(msg);
        });
        this.handleSignals();
    }
    fullscreen(model_id) {
        var that = this;
        this.model.widget_manager.get_model(model_id).then((model) => {
            var key = Object.keys(model.views)[0];
            model.views[key].then((view) => {
                that.stage.toggleFullscreen(view.el);
            });
        });
    }
    handleSignals() {
        var that = this;
        this.stage.signals.fullscreenChanged.add(function (isFullscreen) {
            that.model.set("_is_fullscreen", isFullscreen);
            that.touch();
        });
    }
    executeCode(code) {
        eval(code);
    }
    on_msg(msg) {
        if ('executeCode' in msg) {
            this.executeCode(msg.executeCode);
        }
    }
}
exports.FullscreenView = FullscreenView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mdWxsc2NyZWVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFnRDtBQUNoRCwyQkFBMEI7QUFDMUIsaUNBQWlDO0FBR2pDLE1BQ00sZUFBZ0IsU0FBUSxPQUFPLENBQUMsY0FBYztJQUNoRCxRQUFRO1FBQ0osdUNBQ1csS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUNuQixXQUFXLEVBQUUsaUJBQWlCLEVBQzlCLGFBQWEsRUFBRSxvQkFBb0IsRUFDbkMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxFQUN6RCxVQUFVLEVBQUUsZ0JBQWdCLEVBQzVCLFlBQVksRUFBRSxvQkFBb0IsRUFDbEMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxJQUMzRDtJQUNMLENBQUM7Q0FDUjtBQWJELDBDQWFDO0FBRUQsTUFDTSxHQUFHO0NBQ1I7QUFGRCxrQkFFQztBQUdELE1BQ00sY0FBZSxTQUFRLGVBQVE7SUFFakMsTUFBTTtRQUNGLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDNUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVMsR0FBRztZQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3BCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBUTtRQUNmLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN6RCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNyQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUN4QyxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELGFBQWE7UUFDVCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUE7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxZQUFZO1lBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFBO1lBQzlDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNoQixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBSTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRztRQUNOLElBQUksYUFBYSxJQUFJLEdBQUcsRUFBQztZQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtTQUNwQztJQUNMLENBQUM7Q0FDSjtBQXZDRCx3Q0F1Q0MifQ==